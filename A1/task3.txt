
Why do we use concurrent execution (multithreading/multiprocessing, or the like)? List a fair few reasons.

- So we can run parallel multiple threads in one process.
- Make more use of todays multicore processor.



-   How can adding more concurrent tasks make programming simpler? (Think about translation from idea to code...)


- Accessing small I/O devices.
- Serving multiple network clients.


-   And how can it make programming more difficult? (Maybe come back to this after you have worked on part 4 of this exercise)


What are the differences between processes, threads, green threads, and fibers?

-    Process: OS-managed (possibly) truly concurrent, 
at least in the presence of suitable hardware support. Exist within 
their own address space.
-    Thread: OS-managed, within the same address space as 
the parent and all its other threads. Possibly truly concurrent, 
and multi-tasking is pre-emptive.
-    Green Thread: These are user-space projections of the same 
concept as threads, but are not OS-managed. Probably not truly concurrent, 
except in the sense that there may be multiple worker threads or 
processes giving them CPU time concurrently, so probably best to consider 
this as interleaved or multiplexed.
-    Fibers: OS-managed. Exactly threads, except co-operatively 
multitasking, and hence not truly concurrent.


-    Which one of these do pthread_create() (C/POSIX), threading.Thread() (Python), go (Go) create?

pthread_create() creates a thread.
threading.Thread() does the same.
Goroutine are similar to green threads og fibers, because they are lighter-wheight.

-    How does pythons Global Interpreter Lock (GIL) influence the way a python Thread behaves?

Such that one thread would not take all the processor power.

-    With this in mind: What is the workaround for the GIL (Hint: it's another module)? How do you then share resources (variables/data)?
    What does func GOMAXPROCS(n int) int change?

Use the module multiprocessing. Can use a Queue to share resources.
GOMAXPROCS(n int) limits the number of operating system threads that can execute user
level go code simultaneously.
    

